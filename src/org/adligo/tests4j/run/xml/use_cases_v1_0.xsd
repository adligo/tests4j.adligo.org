<?xml version="1.0" encoding="UTF-8"?>
<!--  
  This file contains a schema to track UseCases of a system, this could be hooked up to a Jira or Lean kit kind of tool for
  entry of UseCases by technical or non-technical people.
  
  
  Copyright 2014 Adligo Inc / Scott Morgan
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
-->
<schema xmlns="http://www.w3.org/2001/XMLSchema" 
	targetNamespace="http://www.adligo.org/tests4j/run/xml/io/use_cases/v1_0" 
	xmlns:uns="http://www.adligo.org/tests4j/run/xml/io/use_cases/v1_0"
	elementFormDefault="qualified">



    <complexType name="use_case_type">
    	<sequence>
    		<element name="actor" type="string" minOccurs="1"
    			maxOccurs="unbounded">

    			<annotation>
    				<documentation>
    					The name of the actor, must match the name of a
    					.actor_type[name] in a requirements.xml file.
    				</documentation>
    			</annotation>
    		</element>
    		<element name="extend" type="uns:use_case_name_type"
    			minOccurs="0" maxOccurs="unbounded">
    		</element>
    		<element name="include" type="uns:use_case_name_type"
    			minOccurs="0" maxOccurs="unbounded">
    		</element>
    		<element name="generalize" type="uns:use_case_name_type"
    			minOccurs="0" maxOccurs="unbounded">
    		</element>
    		<element name="comments" type="string" minOccurs="0"
    			maxOccurs="1">
    			<annotation>
    				<documentation>
    					This could be anything including the a scrum
    					story.
    				</documentation>
    			</annotation>
    		</element>
    		<element name="step" type="uns:step_type" minOccurs="0" maxOccurs="unbounded"></element>
    	</sequence>

    	<attribute name="name" type="string" use="required">
    		<annotation>
    			<documentation>This is the name of the use case,
and also acts as it's unique identifier.
</documentation>
    		</annotation></attribute>
    	<attribute name="abstract" type="boolean" use="optional">
    		<annotation>
    			<documentation>Abstract means that the use case is vague
which indicates a single trials tests would 
not be capable of proving or disproving
anything useful.  Abstract use cases
are helpful in identifying common
steps which can be reused, and branch
points.  This is just a way of codifying the
use case variations.</documentation>
    		</annotation></attribute>
    </complexType>

    <complexType name="use_case_name_type">
    	<attribute name="name" type="string" use="required"></attribute>
    </complexType>


    <element name="use_case" type="uns:use_case_type"></element>

    <complexType name="step_type">
    	<simpleContent>
    		<extension base="string">
    			<attribute name="id" type="uns:version_type"
    				use="required">
    			</attribute>
    			<attribute name="abstract" type="boolean">
    				<annotation>
    					<documentation>A abstract step may only be added
to a abstract use case.  A abstract
step must be implemented in 
all extensions of a use case.</documentation>
    				</annotation></attribute>
    		</extension>
    	</simpleContent>
    </complexType>

    <simpleType name="version_type">
        <annotation>
        	<documentation>Note when use in the context of a step,
this is the branch information.  
Ie step 1.1 branches step 1.</documentation>
        </annotation>
        <restriction base="string">
        	<!--  original was ^(?:(\d+)\.){0,2}(\*|\d+)$ -->
    		<pattern value="^(\?:(\d+)\.){0,2}(\*|\d+)$"></pattern>
    	</restriction>
    </simpleType>
</schema>