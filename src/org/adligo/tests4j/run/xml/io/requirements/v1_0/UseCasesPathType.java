//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.17 at 03:26:33 PM CST 
//


package org.adligo.tests4j.run.xml.io.requirements.v1_0;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;


/**
 * 
 * 
 * 			This is relative path from the requirements.xml file or full resource path using the java resource api (slash as a path separator).  
 * 			Each use case (including optional use case extensions) is stored as a xml file which has a name attribute.  
 * 			A use case path includes all sub directories.  
 * 			Use case names must be unique with in the set of use case paths for projects and systems.  
 * 			requirements.xml
 * 			  |-> system: Tests4j
 * 			  |  |-> use_case_path [name: use_cases, path=use_cases]
 * 			  |  |-> project: tests4j.adligo.org
 * 			  | -> project: testsj4.adligo.org
 * 			  |  |-> use_case_path:  [name: use_cases, path=use_cases]			  
 * 			  | -> project: testsj4_4jacoco.adligo.org
 * 			  |       |-> use_case_path:  [name: use_cases, path=use_cases]
 * 			  |       |-> use_case_path:  [name: jacoco_use_cases, path=jacoco_use_cases]								
 * 			use_cases (directory)
 * 			  | -> test_software.xml
 * 			          ... use case: test code coverage.  abstract because it can't be done without a implementation.
 * 			jacoco_use_cases (direcory) 
 * 			  | -> test_software_code_coverage.xml which indicates that it extends test_software.xml,
 * 			  				although a use case may have other extensions, and may have extensions through 
 * 			  				means other than this file name linking indicator.  This type of use case
 * 			  				extension is never required, so that new use cases can always be incorporated.
 * 			  				
 * 
 * 			 This allows use cases to overlap between
 * 			 projects and systems, and allows extension
 * 			of use cases between systems and projects
 * 			in the current directory structure and between
 * 			project directory structures.
 * 			
 * 			In addition the tests4j_4gwt project can have it's own test project
 * 			and extend tests4j_tests use cases i.e.;
 * 			tests4j_tests (project)
 * 				/src/org/tests4j_tests/use_cases  (directory)
 * 			           | -> test_software.xml
 * 			tests4j_4gwt_tests (project)
 * 				/src/org/tests4j_4gwt_tests/use_cases  (directory)
 * 			           | -> test_software_in_javascript_interpreter.xml extends test software
 * 
 * 			
 * 
 * <p>Java class for use_cases_path_type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="use_cases_path_type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="path" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="parent" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "use_cases_path_type")
public class UseCasesPathType {

    @XmlAttribute(name = "name")
    protected String name;
    @XmlAttribute(name = "path", required = true)
    protected String path;
    @XmlAttribute(name = "parent")
    protected String parent;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the path property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPath() {
        return path;
    }

    /**
     * Sets the value of the path property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPath(String value) {
        this.path = value;
    }

    /**
     * Gets the value of the parent property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getParent() {
        return parent;
    }

    /**
     * Sets the value of the parent property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setParent(String value) {
        this.parent = value;
    }

}
