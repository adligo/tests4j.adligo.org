//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.17 at 03:26:33 PM CST 
//


package org.adligo.tests4j.run.xml.io.requirements.v1_0;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * This is a way to add requirements to tests4j so that the 
 * requirements can be compared verses the UseCaseTrials so that
 * system/project/product owners know when 
 * a requirement was fulfilled.  Actor is required so that there will
 * be at least a description of who (or what) will use it, since
 * Actor names will need to match up to the use cases.  
 * 
 * Note all use case path names in this file and imported requirements
 * must be unique.
 * 
 * <p>Java class for requirements_type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="requirements_type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="actor" type="{http://www.adligo.org/tests4j/run/xml/io/requirements/v1_0}actor_type" maxOccurs="unbounded"/&gt;
 *         &lt;element name="import" type="{http://www.adligo.org/tests4j/run/xml/io/requirements/v1_0}imported_requirements_type" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="use_case_path" type="{http://www.adligo.org/tests4j/run/xml/io/requirements/v1_0}use_cases_path_type" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="project" type="{http://www.adligo.org/tests4j/run/xml/io/requirements/v1_0}project_type" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="system" type="{http://www.adligo.org/tests4j/run/xml/io/requirements/v1_0}system_type" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "requirements_type", propOrder = {
    "actor",
    "_import",
    "useCasePath",
    "project",
    "system"
})
public class RequirementsType {

    @XmlElement(required = true)
    protected List<ActorType> actor;
    @XmlElement(name = "import")
    protected List<ImportedRequirementsType> _import;
    @XmlElement(name = "use_case_path")
    protected List<UseCasesPathType> useCasePath;
    protected List<ProjectType> project;
    protected List<SystemType> system;

    /**
     * Gets the value of the actor property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the actor property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getActor().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ActorType }
     * 
     * 
     */
    public List<ActorType> getActor() {
        if (actor == null) {
            actor = new ArrayList<ActorType>();
        }
        return this.actor;
    }

    /**
     * Gets the value of the import property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the import property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getImport().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ImportedRequirementsType }
     * 
     * 
     */
    public List<ImportedRequirementsType> getImport() {
        if (_import == null) {
            _import = new ArrayList<ImportedRequirementsType>();
        }
        return this._import;
    }

    /**
     * Gets the value of the useCasePath property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the useCasePath property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUseCasePath().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link UseCasesPathType }
     * 
     * 
     */
    public List<UseCasesPathType> getUseCasePath() {
        if (useCasePath == null) {
            useCasePath = new ArrayList<UseCasesPathType>();
        }
        return this.useCasePath;
    }

    /**
     * Gets the value of the project property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the project property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getProject().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ProjectType }
     * 
     * 
     */
    public List<ProjectType> getProject() {
        if (project == null) {
            project = new ArrayList<ProjectType>();
        }
        return this.project;
    }

    /**
     * Gets the value of the system property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the system property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSystem().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SystemType }
     * 
     * 
     */
    public List<SystemType> getSystem() {
        if (system == null) {
            system = new ArrayList<SystemType>();
        }
        return this.system;
    }

}
