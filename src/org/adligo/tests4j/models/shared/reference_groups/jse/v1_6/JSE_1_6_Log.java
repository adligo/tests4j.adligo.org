package org.adligo.tests4j.models.shared.reference_groups.jse.v1_6;

import java.util.HashMap;
import java.util.Map;

import org.adligo.tests4j.models.shared.association.I_PackageConstantLookupModel;
import org.adligo.tests4j.shared.asserts.reference.NameOnlyReferenceGroup;
import org.adligo.tests4j.shared.asserts.reference.ReferenceGroupBaseDelegate;


/**
 * these are constants for the versions
 * of java, the plan is to support at least the 
 * previous 3 minor versions (today on 8/26/2014 that would be 1.8, 1.7, 1.6)
 * 
 * partially generated by org.adligo.tests4j_gen.console.JSEGroupGen
 * copy/pasting...
 * Also this class should eventually include the entire api 
 * (public methods and fields), for assertion dependency.
 * 
 * @author scott
 *
 */
public class JSE_1_6_Log extends ReferenceGroupBaseDelegate implements I_JSE_1_6_Log, I_PackageConstantLookupModel {
	public static final String JAVA_LOG = "java.util.logging";
	private static final Map<String,String> CONSTANT_LOOKUP = getConstantLookup();
	public static final JSE_1_6_Log INSTANCE = new JSE_1_6_Log();
	
	private static Map<String,String> getConstantLookup() {
		Map<String,String> toRet = new HashMap<>();
		toRet.put("java.util.logging.Filter","FILTER");
		toRet.put("java.util.logging.LoggingMXBean","LOGGING_MXBEAN");
		toRet.put("java.util.logging.ConsoleHandler","CONSOLE_HANDLER");
		toRet.put("java.util.logging.ErrorManager","ERROR_MANAGER");
		toRet.put("java.util.logging.FileHandler","FILE_HANDLER");
		toRet.put("java.util.Formatter","FORMATTER");
		toRet.put("java.util.logging.Handler","HANDLER");
		toRet.put("java.util.logging.Level","LEVEL");
		toRet.put("java.util.logging.Logger","LOGGER");
		toRet.put("java.util.logging.LoggingPermission","LOGGING_PERMISSION");
		toRet.put("java.util.logging.LogManager","LOG_MANAGER");
		toRet.put("java.util.logging.LogRecord","LOG_RECORD");
		toRet.put("java.util.logging.MemoryHandler","MEMORY_HANDLER");
		toRet.put("java.util.logging.SimpleFormatter","SIMPLE_FORMATTER");
		toRet.put("java.util.logging.SocketHandler","SOCKET_HANDLER");
		toRet.put("java.util.logging.StreamHandler","STREAM_HANDLER");
		toRet.put("java.util.logging.XMLFormatter","XMLFORMATTER");
		return toRet;
	}
	
	private JSE_1_6_Log() {
		super.setDelegate(new NameOnlyReferenceGroup(CONSTANT_LOOKUP.keySet()));
	}
	

	@Override
	public String getPackageName() {
		return JAVA_LOG;
	}

	@Override
	public String getConstantName(String javaName) {
		return CONSTANT_LOOKUP.get(javaName);
	}

	@Override
	public Map<String, String> getModelMap() {
		return CONSTANT_LOOKUP;
	};
}
