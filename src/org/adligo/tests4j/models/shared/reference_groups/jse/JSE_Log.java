package org.adligo.tests4j.models.shared.reference_groups.jse;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.adligo.tests4j.models.shared.association.I_PackageConstantLookup;
import org.adligo.tests4j.models.shared.reference_groups.jse.v1_8.I_JSE_1_8_Log;
import org.adligo.tests4j.shared.asserts.reference.NameOnlyReferenceGroup;
import org.adligo.tests4j.shared.asserts.reference.ReferenceGroupBaseDelegate;


/**
 * This class represents the latest classes in java.io
 * for the latest version JSE version (1_8 on 10/1/2014),
 * allowing any method call/field reference.
 * 
 * partially generated by org.adligo.tests4j_gen.console.JSEGroupGen
 * copy/pasting...
 * Also this class should eventually include the entire api 
 * (public methods and fields), for assertion dependency.
 * 
 * @author scott
 *
 */
public class JSE_Log extends ReferenceGroupBaseDelegate implements I_JSE_1_8_Log, I_PackageConstantLookup {
	public static final String JAVA_LOG = "java.util.logging";
	private static final Map<String,String> CONSTANT_LOOKUP = getConstantLookup();
	public static final Set<String> CLASS_NAMES = CONSTANT_LOOKUP.keySet();
	public static final JSE_Log INSTANCE = new JSE_Log();
	
	private static Map<String,String> getConstantLookup() {
		Map<String,String> toRet = new HashMap<>();
		toRet.put("java.util.logging.Filter","FILTER");
		toRet.put("java.util.logging.LoggingMXBean","LOGGING_MXBEAN");
		toRet.put("java.util.logging.ConsoleHandler","CONSOLE_HANDLER");
		toRet.put("java.util.logging.ErrorManager","ERROR_MANAGER");
		toRet.put("java.util.logging.FileHandler","FILE_HANDLER");
		toRet.put("java.util.Formatter","FORMATTER");
		toRet.put("java.util.logging.Handler","HANDLER");
		toRet.put("java.util.logging.Level","LEVEL");
		toRet.put("java.util.logging.Logger","LOGGER");
		toRet.put("java.util.logging.LoggingPermission","LOGGING_PERMISSION");
		toRet.put("java.util.logging.LogManager","LOG_MANAGER");
		toRet.put("java.util.logging.LogRecord","LOG_RECORD");
		toRet.put("java.util.logging.MemoryHandler","MEMORY_HANDLER");
		toRet.put("java.util.logging.SimpleFormatter","SIMPLE_FORMATTER");
		toRet.put("java.util.logging.SocketHandler","SOCKET_HANDLER");
		toRet.put("java.util.logging.StreamHandler","STREAM_HANDLER");
		toRet.put("java.util.logging.XMLFormatter","XMLFORMATTER");
		return toRet;
	}
	
	private JSE_Log() {
		super.setDelegate(new NameOnlyReferenceGroup(CONSTANT_LOOKUP.keySet()));
	}
	

	@Override
	public String getPackageName() {
		return JAVA_LOG;
	}

	@Override
	public String getConstantName(String javaName) {
		return CONSTANT_LOOKUP.get(javaName);
	};
}
