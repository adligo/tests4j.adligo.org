package org.adligo.tests4j.models.shared.reference_groups.jse;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.adligo.tests4j.models.shared.association.I_PackageConstantLookup;
import org.adligo.tests4j.models.shared.reference_groups.jse.v1_8.I_JSE_1_8_Util;
import org.adligo.tests4j.shared.asserts.reference.NameOnlyReferenceGroup;
import org.adligo.tests4j.shared.asserts.reference.ReferenceGroupBaseDelegate;


/**
 * This class represents the latest classes in java.io
 * for the latest version JSE version (1_8 on 10/1/2014),
 * allowing any method call/field reference.
 * 
 * partially generated by org.adligo.tests4j_gen.console.JSEGroupGen
 * copy/pasting...
 * Also this class should eventually include the entire api 
 * (public methods and fields), for assertion dependency.
 * 
 * @author scott
 *
 */
public class JSE_Util extends ReferenceGroupBaseDelegate  implements I_JSE_1_8_Util, I_PackageConstantLookup {
	public static final String JAVA_UTIL = "java.util";
	private static final Map<String,String> CONSTANT_LOOKUP = getConstantLookup();
	public static final Set<String> CLASS_NAMES = CONSTANT_LOOKUP.keySet();
	public static final JSE_Util INSTANCE = new JSE_Util();
	
	
	private JSE_Util() {
	  super.setDelegate(new NameOnlyReferenceGroup(CONSTANT_LOOKUP.keySet()));
	};
	
	private static Map<String,String> getConstantLookup() {
		Map<String,String> toRet = new HashMap<>();
		//autogenerated by org.adligo.tests4j_gen.console.JSEGroupGen
		toRet.put("java.util.Collection","COLLECTION");
		toRet.put("java.util.Comparator","COMPARATOR");
		toRet.put("java.util.Deque","DEQUE");
		toRet.put("java.util.Enumeration","ENUMERATION");
		toRet.put("java.util.EventListener","EVENT_LISTENER");
		toRet.put("java.util.Formattable","FORMATTABLE");
		toRet.put("java.util.Iterator","ITERATOR");
		toRet.put("java.util.List","LIST");
		toRet.put("java.util.ListIterator","LIST_ITERATOR");
		toRet.put("java.util.Map","MAP");
		toRet.put("java.util.Map$Entry","ENTRY");
		toRet.put("java.util.NavigableMap","NAVIGABLE_MAP");
		toRet.put("java.util.NavigableSet","NAVIGABLE_SET");
		toRet.put("java.util.Observer","OBSERVER");
		toRet.put("java.util.Queue","QUEUE");
		toRet.put("java.util.RandomAccess","RANDOM_ACCESS");
		toRet.put("java.util.Set","SET");
		toRet.put("java.util.SortedMap","SORTED_MAP");
		toRet.put("java.util.SortedSet","SORTED_SET");
		toRet.put("java.util.AbstractCollection","ABSTRACT_COLLECTION");
		toRet.put("java.util.AbstractList","ABSTRACT_LIST");
		toRet.put("java.util.AbstractMap","ABSTRACT_MAP");
		toRet.put("java.util.AbstractMap$SimpleEntry","SIMPLE_ENTRY");
		toRet.put("java.util.AbstractMap$SimpleImmutableEntry","SIMPLE_IMMUTABLE_ENTRY");
		toRet.put("java.util.AbstractQueue","ABSTRACT_QUEUE");
		toRet.put("java.util.AbstractSequentialList","ABSTRACT_SEQUENTIAL_LIST");
		toRet.put("java.util.AbstractSet","ABSTRACT_SET");
		toRet.put("java.util.ArrayDeque","ARRAY_DEQUE");
		toRet.put("java.util.ArrayList","ARRAY_LIST");
		toRet.put("java.util.Arrays","ARRAYS");
		toRet.put("java.util.BitSet","BIT_SET");
		toRet.put("java.util.Calendar","CALENDAR");
		toRet.put("java.util.Collections","COLLECTIONS");
		toRet.put("java.util.Currency","CURRENCY");
		toRet.put("java.util.Date","DATE");
		toRet.put("java.util.Dictionary","DICTIONARY");
		toRet.put("java.util.EnumMap","ENUM_MAP");
		toRet.put("java.util.EnumSet","ENUM_SET");
		toRet.put("java.util.EventListenerProxy","EVENT_LISTENER_PROXY");
		toRet.put("java.util.EventObject","EVENT_OBJECT");
		toRet.put("java.util.FormattableFlags","FORMATTABLE_FLAGS");
		toRet.put("java.util.Formatter","FORMATTER");
		toRet.put("java.util.GregorianCalendar","GREGORIAN_CALENDAR");
		toRet.put("java.util.HashMap","HASH_MAP");
		toRet.put("java.util.HashSet","HASH_SET");
		toRet.put("java.util.Hashtable","HASHTABLE");
		toRet.put("java.util.IdentityHashMap","IDENTITY_HASH_MAP");
		toRet.put("java.util.LinkedHashMap","LINKED_HASH_MAP");
		toRet.put("java.util.LinkedHashSet","LINKED_HASH_SET");
		toRet.put("java.util.ListResourceBundle","LIST_RESOURCE_BUNDLE");
		toRet.put("java.util.Locale","LOCALE");
		toRet.put("java.util.Locale$Builder","BUILDER");
		toRet.put("java.util.Objects","OBJECTS");
		toRet.put("java.util.Observable","OBSERVABLE");
		toRet.put("java.util.PriorityQueue","PRIORITY_QUEUE");
		toRet.put("java.util.Properties","PROPERTIES");
		toRet.put("java.util.PropertyPermission","PROPERTY_PERMISSION");
		toRet.put("java.util.PropertyResourceBundle","PROPERTY_RESOURCE_BUNDLE");
		toRet.put("java.util.Random","RANDOM");
		toRet.put("java.util.ResourceBundle","RESOURCE_BUNDLE");
		toRet.put("java.util.ResourceBundle$Control","CONTROL");
		toRet.put("java.util.Scanner","SCANNER");
		toRet.put("java.util.ServiceLoader","SERVICE_LOADER");
		toRet.put("java.util.SimpleTimeZone","SIMPLE_TIME_ZONE");
		toRet.put("java.util.Stack","STACK");
		toRet.put("java.util.StringTokenizer","STRING_TOKENIZER");
		toRet.put("java.util.Timer","TIMER");
		toRet.put("java.util.TimerTask","TIMER_TASK");
		toRet.put("java.util.TimeZone","TIME_ZONE");
		toRet.put("java.util.TreeMap","TREE_MAP");
		toRet.put("java.util.TreeSet","TREE_SET");
		toRet.put("java.util.UUID","UUID");
		toRet.put("java.util.Vector","VECTOR");
		toRet.put("java.util.WeakHashMap","WEAK_HASH_MAP");
		toRet.put("java.util.Formatter$BigDecimalLayoutForm","BIG_DECIMAL_LAYOUT_FORM");
		toRet.put("java.util.Locale$Category","CATEGORY");
		toRet.put("java.util.ConcurrentModificationException","CONCURRENT_MODIFICATION_EXCEPTION");
		toRet.put("java.util.DuplicateFormatFlagsException","DUPLICATE_FORMAT_FLAGS_EXCEPTION");
		toRet.put("java.util.EmptyStackException","EMPTY_STACK_EXCEPTION");
		toRet.put("java.util.FormatFlagsConversionMismatchException","FORMAT_FLAGS_CONVERSION_MISMATCH_EXCEPTION");
		toRet.put("java.util.FormatterClosedException","FORMATTER_CLOSED_EXCEPTION");
		toRet.put("java.util.IllegalFormatCodePointException","ILLEGAL_FORMAT_CODE_POINT_EXCEPTION");
		toRet.put("java.util.IllegalFormatConversionException","ILLEGAL_FORMAT_CONVERSION_EXCEPTION");
		toRet.put("java.util.IllegalFormatException","ILLEGAL_FORMAT_EXCEPTION");
		toRet.put("java.util.IllegalFormatFlagsException","ILLEGAL_FORMAT_FLAGS_EXCEPTION");
		toRet.put("java.util.IllegalFormatPrecisionException","ILLEGAL_FORMAT_PRECISION_EXCEPTION");
		toRet.put("java.util.IllegalFormatWidthException","ILLEGAL_FORMAT_WIDTH_EXCEPTION");
		toRet.put("java.util.IllformedLocaleException","ILLFORMED_LOCALE_EXCEPTION");
		toRet.put("java.util.InputMismatchException","INPUT_MISMATCH_EXCEPTION");
		toRet.put("java.util.InvalidPropertiesFormatException","INVALID_PROPERTIES_FORMAT_EXCEPTION");
		toRet.put("java.util.MissingFormatArgumentException","MISSING_FORMAT_ARGUMENT_EXCEPTION");
		toRet.put("java.util.MissingFormatWidthException","MISSING_FORMAT_WIDTH_EXCEPTION");
		toRet.put("java.util.MissingResourceException","MISSING_RESOURCE_EXCEPTION");
		toRet.put("java.util.NoSuchElementException","NO_SUCH_ELEMENT_EXCEPTION");
		toRet.put("java.util.TooManyListenersException","TOO_MANY_LISTENERS_EXCEPTION");
		toRet.put("java.util.UnknownFormatFlagsException","UNKNOWN_FORMAT_FLAGS_EXCEPTION");
		toRet.put("java.util.ServiceConfigurationError","SERVICE_CONFIGURATION_ERROR");
		return toRet;
	}

	@Override
	public String getPackageName() {
		return JAVA_UTIL;
	}

	@Override
	public String getConstantName(String javaName) {
		return CONSTANT_LOOKUP.get(javaName);
	}

}
