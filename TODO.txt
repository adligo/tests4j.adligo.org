Short term list;

Add export of results to files.
Add fabricate run of tests4j_tests including fail on run failure
extract tests4j_tests 4 gwt_refs to gwt_refs_tests
Add fabricate run of tests4j_tests including fail on run failure
Add tests4j_4eclipse basic run trial, package, packages 
	runner only to text no gui other than runners.

Make TrialRunContext work correctly  so that load testing can occur
   by running multiple copies of use cases which share browser windows/users,
   provide a api for recording external resources of other computers/processes
   so a 3 tier browser, app server, db app could actually be tested on 
   three machines (or a single machine) all the results aggregated through tests4j and 
   compacted for intelligence4j.

Long term list;
   
   Javadoc cleanup;
      Add <br/>s
      Makes sure comments for simple methods that return data 
      are after @return.
      @links
      @see 
      etc.
1) tests4j_4gwt (target tests4j_v0_2) 
			This will contain some abstract code that will help
        run tests4j tests in a web browser from a javascript runtime.
        This will contain a server so that the tests from the browser
        can upload the results to a real JSE java environment, which 
        can then be sent elsewhere (i.e. a intellegence4j server)
2) tests4j_gwt (target tests4j_v0_2)
			This will contain java code which will generate .java source 
		code to actually run a project's tests in javascript.  This is 
		the basic solution to the lack of reflection in gwt client code.
3) tests4j_v0_2
   assertion api thoughts...
   add annotation for asserting exceptions like junit has,
   but that allows exception message tracking.
   (also Keep the current assertThrown api!)

	assertion api
	interface for I_CollectionAsserts?
   assertContainsKey (Map, Object)
   assertSize(int size, Collection)
   assertEmpty(Collection)
   
   assertClassNamesEqual(Object, Object);
   
Code in the tests4j project that needs to be implemented 
at some point.

3) SourceInfo needs a .java file parser to correctly (target tests4j_v0_3)
  determine if a .class file hasInterface and hasClass/hasEnum
  for code bases which allow inner classes in .java files where 
  the primary class is a interface.
  
4) Running the tests4j trials on a android or ios (mac) device (target tests4j_v0_3)
using the ADF mobile framework

5) Running the tests4j trials on a android device using the native android api (target tests4j_v0_4)
		This will only be done by adligo if ADF doesn't seem like a good platform
		for video games.
		
		